# GC_UM_Chunk umheap.h

define listchunks
    set $list = $arg0
    set $e = $list
    set $i = 0
    while $e != 0x0
        printf "rtml-debug: listchunks #%d: %p ", $i++, $e
        set $e = (GC_UM_Chunk)$e->next_chunk
        printf "\n"
    end
end

def dumpchunk
    set $caddr = $arg0
    print *((GC_UM_Chunk) $caddr)
end

def dumpprevchunk
    set $caddr = $arg0
    print *((GC_UM_Chunk) $caddr)->prev_chunk
end

def returnaddress
    set $caddr = $arg0
    set $raoffset = ((GC_UM_Chunk) $caddr)->ra
    set $ra = *(unsigned int*)((GC_UM_Chunk) $caddr)->ml_object[$raoffset]
    print $raoffset
    print $ra
end

def dumpthread
    set $tn = $arg0
    if gcState.currentThread[$tn] == 1
        print "not a valid thread"
    else
        print *((GC_thread) gcState.currentThread[$tn])
    end
end

define dumpcurrentframe
    set $tn = $arg0
    if gcState.currentThread[$tn] == 1
        print "not a valid thread"
    else
        x /32wx gcState->currentFrame[$arg0]
    end
end
document dumpcurrentframe
    dumpcurrentframe [tn]
    dump the current frame (first 32 words) as hex
end

define dumpstrings
    set $a = $arg0
    x /32sb $arg0
end
document dumpstrings
    dumpstrings [addr]
    dump the first 32 strings at the given address
end

define dumpstack
    set $tn = $arg0
    if gcState.currentThread[$tn] == 1
        print "not a valid thread"
    else
        set $e = ((GC_thread) gcState.currentThread[$tn])->firstFrame
        set $i = 0
        while $e != 0x0
            printf "dumpstack: #%d: %p ", $i++, $e
            set $e = ((GC_UM_Chunk)$e)->next_chunk
            printf "\n"
        end
    end
end

define whichheap
    set $a = $arg0
    if gcState->heap.start <= $a && $a <= (gcState->heap.start + gcState->heap.size)
        print "is on old heap"
    end
    if gcState->umheap.start <= $a && $a <= gcState->umheap.end
        print "is on chunked heap"
    end
end
document whichheap
   whichheap(address)
   determine which heap the address is on.
end

define isonstack
    set $tn = $arg0
    set $addr = $arg1
    set $chunknum = 0
    set $foundaddr = 0
    if gcState.currentThread[$tn] == 1
        print "not a valid thread"
    else
        set $framestartaddr = ((GC_thread) gcState.currentThread[$tn])->firstFrame
        set $frameendaddr = $framestartaddr + sizeof(GC_UM_Chunk)
        set $i = 0
        set $found = 0
        while $framestartaddr != 0x0 && $found == 0
            set $chunknum = $chunknum + 1
            if $framestartaddr <= $addr && $addr <= $frameendaddr
                # print "is in stack"
                set $found = 1
                set $foundaddr = $framestartaddr
            else
                set $framestartaddr = ((GC_UM_Chunk)$framestartaddr)->next_chunk
                set $frameendaddr = $framestartaddr + sizeof(GC_UM_Chunk)
            end
        end
    end
    if $found == 1
        print "is on stack at chunk:"
        print $chunknum
        print $foundaddr
    else
        print "not on stack"
    end
end
document isonstack
    isonstack(thr_num, address)
    if address is on the stack of thr_num
end

define tohex
    print /x $arg0
end

define todec
    print /d $arg0
end
